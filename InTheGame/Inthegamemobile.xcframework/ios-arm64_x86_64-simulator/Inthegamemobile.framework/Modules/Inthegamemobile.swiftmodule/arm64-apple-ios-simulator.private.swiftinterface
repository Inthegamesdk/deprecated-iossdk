// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Inthegamemobile
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CoreMedia
import Foundation
@_exported import Inthegamemobile
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public struct ITGEnvironment {
  public let apiBaseURL: Swift.String
  public let imageBaseURL: Swift.String
  public let envName: Swift.String
  public init(apiBaseURL: Swift.String, imageBaseURL: Swift.String, envName: Swift.String)
  public static let dev: Inthegamemobile.ITGEnvironment
  public static let test: Inthegamemobile.ITGEnvironment
  public static let stage: Inthegamemobile.ITGEnvironment
  public static let prod: Inthegamemobile.ITGEnvironment
}
public protocol ITGOverlayDelegate : ObjectiveC.NSObject {
  func overlayWillOpenActivity(height: CoreFoundation.CGFloat)
  func overlayWillCloseActivity()
  func overlayPause()
  func overlayResume()
  func getVideoTime() -> Swift.Double
  func overlayReceivedLink(_ link: Swift.String)
  func overlayRequestedVideoSeek(time: Swift.Double)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class ITGOverlayView : UIKit.UIView, WebKit.WKUIDelegate, WebKit.WKNavigationDelegate, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) weak public var delegate: Inthegamemobile.ITGOverlayDelegate?
  @_Concurrency.MainActor(unsafe) public init(channelSlug: Swift.String, accountName: Swift.String, accountId: Swift.String, environment: Inthegamemobile.ITGEnvironment, delegate: Inthegamemobile.ITGOverlayDelegate?, language: Swift.String = "en", foreignId: Swift.String? = nil, userName: Swift.String? = nil, customUrl: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) public func videoPlaying(time: Swift.Double)
  @_Concurrency.MainActor(unsafe) public func updateOverlayTime()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func hasContentAtPoint(_ point: CoreFoundation.CGPoint) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) public func shutdown()
  @_Concurrency.MainActor(unsafe) public func setLiveMode(enabled: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension Inthegamemobile.ITGOverlayView : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
public struct ChannelInfo : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class ITGTools : ObjectiveC.NSObject {
  public class func getVideoURL(channelSlug: Swift.String, accountId: Swift.String, language: Swift.String, completion: @escaping (Swift.String?, Swift.Error?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
